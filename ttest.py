# Python program to demonstrate how to
# perform two sample T-test

# Import the library
import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt

dep = open("dep-0-7.txt", "r")
dep_content = dep.read()
dep_content_list = dep_content.split("\n")
dep.close()
dep_floats = [float(x) for x in dep_content_list[:-1]]
# print(dep_floats)
# stats.probplot(dep_floats, dist="norm", plot= plt)
# plt.title("Selected depression symptoms Q-Q Plot")
# plt.savefig("sds.png")
# stats.shapiro(dep_floats)

bert = open("bert.txt", "r")
bert_content = bert.read()
bert_content_list = bert_content.split("\n")
bert.close()
bert_floats = [float(x) for x in bert_content_list[:-1]]
# stats.probplot(bert_floats, dist="norm", plot= plt)
# plt.title("Bert Q-Q Plot")
# plt.savefig("bert.png")
# stats.shapiro(bert_floats)
# print(bert_floats)

# Creating data groups

# bert

# group1 = np.array([0.9437229437229437, 0.9047619047619048, 0.9523809523809524, 0.9632034632034632, 0.9805194805194806, 0.8961038961038961, 0.961038961038961, 0.9177489177489178, 0.9956709956709957, 0.9696969696969697, 0.9307359307359307, 0.8852813852813852, 0.9502164502164503, 0.9069264069264069, 0.9155844155844155, 0.9134199134199135, 0.925, 0.925, 0.8954545454545455, 0.9590909090909091, 0.8613636363636363, 0.9727272727272727, 0.8840909090909091, 0.975, 0.9772727272727273, 0.95, 0.9068181818181817, 0.9113636363636364, 0.9772727272727273, 0.9636363636363636, 0.959090909090909, 0.8522727272727272, 0.8704545454545455, 0.95, 0.8409090909090909, 0.9, 0.9, 0.9659090909090909, 0.95, 0.9522727272727273, 0.9409090909090909, 0.9590909090909091, 0.8727272727272727, 0.9318181818181819, 0.9795454545454545, 0.9522727272727272, 0.9636363636363636, 0.9681818181818183, 0.9568181818181818, 0.9818181818181818, 0.984090909090909, 0.9727272727272727, 0.9886363636363635, 0.9863945578231292, 0.8888888888888888, 0.9433106575963719, 0.963718820861678, 0.9886621315192743, 0.981859410430839, 0.9002267573696145, 0.9682539682539681, 0.8253968253968254, 0.9637188208616779, 0.9319727891156463, 0.945578231292517, 0.9410430839002267, 0.9727891156462585, 0.9478458049886621, 0.709750566893424, 0.9387755102040816, 0.9002267573696145, 0.9886621315192743, 0.9365079365079364, 0.9433106575963719, 0.9229024943310657, 0.8866213151927438, 0.9886621315192744, 1.0, 0.9251700680272109, 0.9478458049886621, 0.9546485260770974, 0.9183673469387754, 0.981859410430839, 0.9206349206349207, 0.9433106575963719, 0.945578231292517, 0.9546485260770975, 0.9682539682539683, 0.9160997732426304, 0.9659863945578231, 0.8798185941043084, 0.9160997732426304, 0.9501133786848073, 0.9705215419501134, 0.9024943310657596, 0.9410430839002267, 0.9387755102040816, 0.9659863945578231, 0.8798185941043083, 0.9138321995464853]
#                   )
#
#
# group2 = np.array([0.961038961038961, 0.9177489177489178, 0.9264069264069263, 0.9653679653679654, 0.9437229437229437, 0.9761904761904762, 0.9696969696969697, 0.9783549783549783, 0.9761904761904762, 0.880952380952381, 0.935064935064935, 0.9567099567099567, 0.9329004329004329, 0.9264069264069263, 0.945887445887446, 0.9610389610389609, 0.8681818181818182, 0.9318181818181818, 0.9818181818181819, 0.9704545454545455, 0.925, 0.9522727272727273, 0.9954545454545455, 0.975, 0.9704545454545455, 0.9340909090909091, 0.9704545454545455, 0.9522727272727273, 0.9227272727272727, 0.9068181818181819, 0.9750000000000001, 0.8386363636363637, 0.9727272727272727, 0.9295454545454546, 0.9022727272727273, 0.8954545454545454, 0.9431818181818181, 0.9863636363636363, 0.9568181818181819, 0.9568181818181819, 0.9545454545454546, 0.9136363636363636, 0.9477272727272728, 0.9636363636363636, 0.9636363636363636, 0.8840909090909089, 0.975, 0.9568181818181818, 0.9659090909090909, 0.9772727272727272, 0.9795454545454546, 0.9022727272727272, 0.9636363636363636, 0.9591836734693877, 0.9251700680272108, 0.8934240362811791, 0.9841269841269842, 0.963718820861678, 0.9954648526077097, 0.9206349206349207, 0.8185941043083901, 0.9705215419501134, 0.8752834467120181, 0.8934240362811792, 0.981859410430839, 0.9591836734693877, 0.9909297052154195, 0.8412698412698412, 0.9773242630385488, 0.9183673469387754, 0.9818594104308389, 0.9251700680272108, 0.9591836734693877, 0.909297052154195, 0.961451247165533, 0.9183673469387754, 0.9773242630385488, 0.9478458049886622, 0.9954648526077097, 0.9659863945578231, 0.9297052154195012, 0.9727891156462585, 0.9659863945578231, 0.9591836734693877, 0.9614512471655329, 0.961451247165533, 0.9954648526077097, 0.9727891156462585, 0.9455782312925171, 0.8956916099773242, 0.9047619047619048, 0.9206349206349207, 0.9501133786848073, 0.8594104308390023, 0.9841269841269841, 0.8888888888888888, 0.8798185941043084, 0.8956916099773242, 0.9705215419501134, 0.9410430839002267]
#                   )
#
print(stats.ttest_ind(dep_floats, bert_floats))
# print(np.round(t,4))
# print(np.round(p,4))

# data_group2 = np.array([0.9433881697231212, 0.9149137001078749, 0.9402867673498742, 0.9140546006066734, 0.9419166385799348, 0.9600044938770924, 0.9259878076315196, 0.9358545947166403, 0.943079701964326, 0.931564687288327])

# data_group2 = np.array([15, 17, 14, 17, 14, 8, 12,
#                         19, 19, 14, 17, 22, 24, 16,
#                         13, 16, 13, 18, 15, 13])

# Perform the two sample t-test with equal variances
# print(stats.ttest_ind(a=data_group1, b=data_group2, equal_var=False))